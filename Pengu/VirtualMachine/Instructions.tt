<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	(string name, string instruction)[] instructions = new[]
	{
		("End", @"return ushort.MaxValue;"),
		("Mov_Reg_I8", @"vm.Registers[vm.Memory[m]] = vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("Mov_Reg_Reg", @"
			I8ToI4I4(vm.Memory[m], out var r0, out var r1);
			vm.Registers[r0] = vm.Registers[r1];
			return (ushort)(m + 1);"),
		("Mov_Reg_PI8", @"vm.Registers[vm.Memory[m]] = vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("Mov_Reg_PReg", @"
		    I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] = vm.Registers[r1];
            return (ushort)(m + 1);"),
		("Mov_PI8_I8", @"vm.Memory[vm.Memory[m]] = vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("Mov_PI8_Reg", @"vm.Memory[vm.Memory[m]] = (byte)vm.Registers[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("Mov_PI8_PI8", @"vm.Memory[vm.Memory[m]] = vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("Mov_PI8_PReg", @"vm.Memory[vm.Memory[m]] = vm.Memory[vm.Registers[vm.Memory[m + 1]]]; return (ushort)(m + 2);"),
		("Mov_PReg_I8", @"vm.Memory[vm.Registers[vm.Memory[m]]] = vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("Mov_PReg_Reg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Memory[vm.Registers[r0]] = (byte)vm.Registers[r1];
            return (ushort)(m + 1);"),
		("Mov_PReg_PI8", @"vm.Memory[vm.Registers[vm.Memory[m]]] = vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("Mov_PReg_PReg", @"
			I8ToI4I4(vm.Memory[m], out var r0, out var r1);
			vm.Memory[vm.Registers[r0]] = vm.Memory[vm.Registers[r1]];
			return (ushort)(m + 1);"),
		("AddI_Reg_I8", @"vm.Registers[vm.Memory[m]] += vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("AddI_Reg_Reg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] += vm.Registers[r1];
            return (ushort)(m + 1);"),
		("AddI_Reg_PI8", @"vm.Registers[vm.Memory[m]] += vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("AddI_Reg_PReg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] += vm.Memory[vm.Registers[r1]];
            return (ushort)(m + 1);"),
		("SubI_Reg_I8", @"vm.Registers[vm.Memory[m]] -= vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("SubI_Reg_Reg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] -= vm.Registers[r1];
            return (ushort)(m + 1);"),
		("SubI_Reg_PI8", @"vm.Registers[vm.Memory[m]] -= vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("SubI_Reg_PReg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] -= vm.Memory[vm.Registers[r1]];
            return (ushort)(m + 1);"),
		("MulI_Reg_I8", @"vm.Registers[vm.Memory[m]] *= vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("MulI_Reg_Reg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] *= vm.Registers[r1];
            return (ushort)(m + 1);"),
		("MulI_Reg_PI8", @"vm.Registers[vm.Memory[m]] *= vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("MulI_Reg_PReg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] *= vm.Memory[vm.Registers[r1]];
            return (ushort)(m + 1);"),
		("Int_I8", @"return (ushort)(m + 1);"),
		("DivI_Reg_I8", @"vm.Registers[vm.Memory[m]] /= vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("DivI_Reg_Reg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] /= vm.Registers[r1];
            return (ushort)(m + 1);"),
		("DivI_Reg_PI8", @"vm.Registers[vm.Memory[m]] /= vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("DivI_Reg_PReg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] /= vm.Memory[vm.Registers[r1]];
            return (ushort)(m + 1);"),
		("ModI_Reg_I8", @"vm.Registers[vm.Memory[m]] %= vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("ModI_Reg_Reg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] %= vm.Registers[r1];
            return (ushort)(m + 1);"),
		("ModI_Reg_PI8", @"vm.Registers[vm.Memory[m]] %= vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("ModI_Reg_PReg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] %= vm.Memory[vm.Registers[r1]];
            return (ushort)(m + 1);"),
	};
#>

using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;

namespace Pengu.VirtualMachine
{
	internal enum Instruction
	{
		<# foreach(var (name, _) in instructions) { #>
			<#= name #>, 
		<# } #>
	}

	[System.CodeDom.Compiler.GeneratedCode("Instructions.tt", null)]
	internal static class InstructionSet
	{
		public static readonly Dictionary<Instruction, Func<VM, ushort, ushort>> InstructionDefinitions =
			new Dictionary<Instruction, Func<VM, ushort, ushort>>()
		{
			<# foreach(var (name, code) in instructions) { #>
				[Instruction.<#= name #>] = (vm, m) =>
				{
					<#= code #>
				},
			<# } #>
		};

		static readonly Dictionary<Instruction, Func<Memory<byte>, (string result, int size)>> InstructionDecompilation = 
			new Dictionary<Instruction, Func<Memory<byte>, (string result, int size)>>()
		{
			<# foreach(var (name, _) in instructions) { #>
				[Instruction.<#= name #>] = m =>
				{
					ReadOnlySpan<byte> s = m.Span;

					<#
					var split = name.Split('_');
					var result = split[0].ToUpper() + " ";
					var size = 1;
					var @params = 1;

					for(int idx = 1; idx < split.Length; ++idx)
					{
						// Reg_Reg?
						if(idx + 1 < split.Length && split[idx] == "Reg" && split[idx + 1] == "Reg")
						{
							result += $"r{{s[{idx - 1}] & 0xF}} r{{(s[{idx - 1}] & 0xF0) >> 4}} ";
							idx += 1;
							size += 1;
							@params += 2;
						}
						else if(idx + 1 < split.Length && split[idx] == "PReg" && split[idx + 1] == "PReg")
						{
							result += $"[r{{s[{idx - 1}] & 0xF}}] [r{{(s[{idx - 1}] & 0xF0) >> 4}}] ";
							idx += 1;
							size += 1;
							@params += 2;
						}
						else if(idx + 1 < split.Length && split[idx] == "PReg" && split[idx + 1] == "Reg")
						{
							result += $"[r{{s[{idx - 1}] & 0xF}}] r{{(s[{idx - 1}] & 0xF0) >> 4}} ";
							idx += 1;
							size += 1;
							@params += 2;
						}
						else if(idx + 1 < split.Length && split[idx] == "Reg" && split[idx + 1] == "PReg")
						{
							result += $"r{{s[{idx - 1}] & 0xF}} [r{{(s[{idx - 1}] & 0xF0) >> 4}}] ";
							idx += 1;
							size += 1;
							@params += 2;
						}
						else if(split[idx] == "Reg")
						{
							result += $"r{{s[{idx - 1}] & 0xF}} ";
							size += 1;
							@params += 1;
						}
						else if(split[idx] == "PReg")
						{
							result += $"[r{{s[{idx - 1}] & 0xF}}] ";
							size += 1;
							@params += 1;
						}
						else if(split[idx] == "I8")
						{
							result += $"{{s[{idx - 1}]}} ";
							size += 1;
							@params += 1;
						}
						else if(split[idx] == "PI8")
						{
							result += $"[{{s[{idx - 1}]}}] ";
							size += 1;
							@params += 1;
						}
					}
					#>

					return s.Length >= <#= params #> ? ($"<#= result #>", <#= size #>) : (null, 0);
				},
			<# } #>
		};

		public static string Disassemble(Memory<byte> m, out int size)
		{
			var (result, sz) = InstructionDecompilation[(Instruction)m.Span[0]](m.Slice(1));
			size = sz;
			return result;
		}

        public static void Assemble(string s, VM vm)
        {
			ushort memidx = 0;
			int i0, i1;

            var reader = new StringReader(s);
            string line;
			int lineidx = 0;
            var tokens = new List<string>();
            while ((line = reader.ReadLine()) != null)
            {
				++lineidx;

                tokens.Clear();
                for (int idx = 0; idx < line.Length && !char.IsWhiteSpace(line[idx]); ++idx)
                {
                    var start = idx;
                    while (idx < line.Length && !char.IsWhiteSpace(line[idx]))
                        ++idx;
                    tokens.Add(line[start..idx]);
                }

				if(!tokens.Any()) continue;

				static int GetNumber(string n) => n.StartsWith("0x") ? Convert.ToInt32(n, 16) : int.Parse(n);
				static bool IsReg(string s, out int r) 
				{ 
					var m = Regex.Match(s, @"^r(\d+)$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				static bool IsI8(string s, out int r) 
				{ 
					var m = Regex.Match(s, @"^(\d+|0x[\dA-Fa-f]+)$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				static bool IsPReg(string s, out int r) 
				{ 
					var m = Regex.Match(s, @"^\[r(\d+)\]$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				static bool IsPI8(string s, out int r) 
				{ 
					var m = Regex.Match(s, @"^\[(\d+|0x[\dA-Fa-f]+)\]$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				static bool IsAtAddress(string s, out int r)
				{ 
					var m = Regex.Match(s, @"^@(\d+|0x[\dA-Fa-f]+)$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}

                if (tokens.Count == 1 && IsAtAddress(tokens[0], out i0))
                {
                    // @addr
                    memidx = (ushort)i0;
                    continue;
                }

				if(tokens.Count == 2 && tokens[0].Equals("DB", StringComparison.OrdinalIgnoreCase) && IsI8(tokens[1], out i0))
				{
					// db i8
					vm.Memory[memidx++] = (byte)i0;
					continue;
				}

				if(tokens.Count == 1 && tokens[0].Equals("ORG", StringComparison.OrdinalIgnoreCase))
				{
                    MemoryMarshal.Write(vm.Memory.AsSpan(^2..), ref memidx);
					continue;
				}

				<# foreach(var namegrp in instructions.Select(w => w.name).GroupBy(w => w.Split('_')[0])) { #>
					if(tokens[0].Equals("<#= namegrp.Key #>", StringComparison.OrdinalIgnoreCase))
					{
						<# foreach(var name in namegrp)
						{
							var split = name.Split('_');
						#>
						if(tokens.Count == <#= split.Length #>
							<# int idx = 0; foreach(var token in split.Skip(1)) { #> && Is<#= token #>(tokens[<#= idx + 1 #>], out i<#= idx++ #>) <# } #>)
						{
							vm.Memory[memidx++] = (byte)Instruction.<#= name #>;
							<# if(split.Length == 3) { #>
								<# if(split[1].EndsWith("Reg", StringComparison.OrdinalIgnoreCase) && split[2].EndsWith("Reg", StringComparison.OrdinalIgnoreCase)) { #>
									vm.Memory[memidx++] = (byte)(((i0 & 0xF) << 4) | (i1 & 0xF));
								<# } else { #>
									vm.Memory[memidx++] = (byte)i0;
									vm.Memory[memidx++] = (byte)i1;
								<# } #>
							<# } else if(split.Length == 2) { #>
								vm.Memory[memidx++] = (byte)i0;
							<# } #>
							continue;
						}
						<# } #>
					}
				<# } #>

				throw new AssemblerException(lineidx - 1, line);
            }
        }

	    static void I8ToI4I4(int input, out int v1, out int v2)
        {
            v1 = input & 0xF;
            v2 = (input & 0xF0) >> 4;
        }
	}

	[System.CodeDom.Compiler.GeneratedCode("Instructions.tt", null)]
	class AssemblerException : Exception
	{
		public int LineIndex { get; }
		public string Line { get; }

		public AssemblerException(int lineidx, string line) : base($"Assembler exception in line {lineidx}: {line}")
		{
			LineIndex = lineidx;
			Line = line;
		}
	}
}
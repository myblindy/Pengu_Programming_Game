<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

<#
	instructions = new List<(string name, string instruction)>
	{
		("Nop", @"return m;"),
		("Mov_Reg_I8", @"vm.Registers[vm.Memory[m]] = vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("Mov_Reg_Reg", @"
			I8ToI4I4(vm.Memory[m], out var r0, out var r1);
			vm.Registers[r0] = vm.Registers[r1];
			return (ushort)(m + 1);"),
		("Mov_Reg_PI8", @"vm.Registers[vm.Memory[m]] = vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("Mov_Reg_PReg", @"
		    I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Registers[r0] = vm.Memory[vm.Registers[r1]];
            return (ushort)(m + 1);"),
		("Mov_PI8_I8", @"vm.Memory[vm.Memory[m]] = vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("Mov_PI8_Reg", @"vm.Memory[vm.Memory[m]] = (byte)vm.Registers[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("Mov_PI8_PI8", @"vm.Memory[vm.Memory[m]] = vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("Mov_PI8_PReg", @"vm.Memory[vm.Memory[m]] = vm.Memory[vm.Registers[vm.Memory[m + 1]]]; return (ushort)(m + 2);"),
		("Mov_PReg_I8", @"vm.Memory[vm.Registers[vm.Memory[m]]] = vm.Memory[m + 1]; return (ushort)(m + 2);"),
		("Mov_PReg_Reg", @"
            I8ToI4I4(vm.Memory[m], out var r0, out var r1);
            vm.Memory[vm.Registers[r0]] = (byte)vm.Registers[r1];
            return (ushort)(m + 1);"),
		("Mov_PReg_PI8", @"vm.Memory[vm.Registers[vm.Memory[m]]] = vm.Memory[vm.Memory[m + 1]]; return (ushort)(m + 2);"),
		("Mov_PReg_PReg", @"
			I8ToI4I4(vm.Memory[m], out var r0, out var r1);
			vm.Memory[vm.Registers[r0]] = vm.Memory[vm.Registers[r1]];
			return (ushort)(m + 1);"),
		("Int_I8", @"vm.CallInterrupt(vm.Memory[m]); return (ushort)(m + 1);"),
		("Int_Reg", @"vm.CallInterrupt(vm.Registers[vm.Memory[m]]); return (ushort)(m + 1);"),
		("Jmp_I8", @"return vm.Memory[m];"),
		("Jmp_RI8", @"return (ushort)(m + 1 + vm.Memory[m]);"),
		("Jmp_Reg", @"return (ushort)(vm.Registers[vm.Memory[m]]);"),
		("Jmp_RReg", @"return (ushort)(m + 1 + vm.Registers[vm.Memory[m]]);"),
		("Cmp_I8_I8", @"vm.FlagCompare = (sbyte)vm.Memory[m].CompareTo(vm.Memory[m + 1]); return (ushort)(m + 2);"),
		("Cmp_Reg_I8", @"vm.FlagCompare = (sbyte)vm.Registers[vm.Memory[m]].CompareTo(vm.Memory[m + 1]); return (ushort)(m + 2);"),
		("Cmp_Reg_Reg", @"vm.FlagCompare = (sbyte)vm.Registers[vm.Memory[m]].CompareTo(vm.Registers[vm.Memory[m + 1]]); return (ushort)(m + 2);"),
	};

	foreach(var (name, op) in new[] { ("l", "<"), ("le", "<="), ("g", ">"), ("ge", ">="), ("e", "=="), ("ne", "!=") })
		instructions.AddRange(new []
		{
			($"J{name}_I8", $@"return (ushort)(vm.FlagCompare {op} 0 ? vm.Memory[m] : m + 1);"),
			($"J{name}_RI8", $@"return (ushort)(vm.FlagCompare {op} 0 ? m + 1 + vm.Memory[m] : m + 1);"),
			($"J{name}_Reg", $@"return (ushort)(vm.FlagCompare {op} 0 ? vm.Registers[vm.Memory[m]] : m + 1);"),
			($"J{name}_RReg", $@"return (ushort)(vm.FlagCompare {op} 0 ? m + 1 + vm.Registers[vm.Memory[m]] : m + 1);"),
		});

	foreach(var name in new[] { "Push", "Pop" })
	{
		if(name == "Push")
			instructions.Add(
				($"{name}_I8", $@"
					switch(vm.Type)
					{{
						case VMType.BitLength8:
							vm.Memory[vm.StackRegister--] = vm.Memory[m];
							break;
						default: throw new InvalidOperationException($""Unexpected VM type enountered: {{vm.Type}}."");
					}}
					return (ushort)(m + 1);"));

		instructions.Add(
			($"{name}_Reg", $@"
				switch(vm.Type)
				{{
					case VMType.BitLength8:
						{(name == "Push" 
							? "vm.Memory[vm.StackRegister--] = (byte)vm.Registers[vm.Memory[m]];"
							: "vm.Registers[vm.Memory[m]] = vm.Memory[++vm.StackRegister];" )}
						break;
					default: throw new InvalidOperationException($""Unexpected VM type enountered: {{vm.Type}}."");
				}}
				return (ushort)(m + 1);"));
	}

	instructions.AddRange(new[]
	{
		("Call_I8", @"vm.Memory[vm.StackRegister--] = (byte)(m + 1); return vm.Memory[m];"),
		("Call_RI8", @"vm.Memory[vm.StackRegister--] = (byte)(m + 1); return (ushort)(m + 1 + vm.Memory[m]);"),
		("Call_Reg", @"vm.Memory[vm.StackRegister--] = (byte)(m + 1); return (ushort)(vm.Registers[vm.Memory[m]]);"),
		("Call_RReg", @"vm.Memory[vm.StackRegister--] = (byte)(m + 1); return (ushort)(m + 1 + vm.Registers[vm.Memory[m]]);"),
		("Ret", @"return vm.Memory[++vm.StackRegister];"),
	});

	foreach(var (name, op) in new[] { ("Shl", "<<"), ("Shr", ">>"), ("Or", "|"), ("And", "&"), ("Xor", "^"), ("AddI", "+"), ("SubI", "-"), ("MulI", "*"), ("DivI", "/"), ("ModI", "%") })
		instructions.AddRange(new[]
		{
			($"{name}_Reg_Reg", @$"I8ToI4I4(vm.Memory[m], out var r0, out var r1); vm.Registers[r0] {op}= vm.Registers[r1]; return (ushort)(m + 1);"),
			($"{name}_Reg_I8", @$"vm.Registers[vm.Memory[m]] {op}= vm.Memory[m + 1]; return (ushort)(m + 2);"),
		});

	instructions.Add(("Not_Reg", 
		@"vm.Registers[vm.Memory[m]] = ~vm.Registers[vm.Memory[m]] & 
			(vm.Type switch { VMType.BitLength8 => 0xFF, VMType.BitLength16 => 0xFFFF, _ => throw new InvalidOperationException() });
		  return (ushort)(m + 1);"));
#>

instruction         | bytes                 | description
--------------------|-----------------------|--------------
ORG                 | -                     | sets the starting point of the program (last 1-2 bytes)
@addr               | -                     | continues the assembly at the given address
.label              | -                     | marks the current assembly address with a label
DB I8               | i8                    | writes the byte at the current assembly address
<# foreach(var (name, instr) in instructions) { #> <#= ToAsmInstruction(name) #> | <#= ToAsmBytes(name) #> |
<# } #>

<#  // end of .tt file and reset for the .cs file
	SaveOutput("Assembler Instructions.md");
#>

using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;

namespace Pengu.VirtualMachine
{
	internal enum Instruction
	{
		<# foreach(var (name, _) in instructions) { #>
			<#= name #>, 
		<# } #>
	}

	[System.CodeDom.Compiler.GeneratedCode("Instructions.tt", null)]
	internal static class InstructionSet
	{
		public static readonly Func<VM, ushort, ushort>[] InstructionDefinitions =
			new Func<VM, ushort, ushort>[]
			{
				<# foreach(var (name, code) in instructions) { #>
					(vm, m) =>
					{
						// <#= name #>
						<#= code #>
					},
				<# } #>
			};

		static readonly Func<Memory<byte>, (string result, int size)>[] InstructionDecompilation = 
			new Func<Memory<byte>, (string result, int size)>[]
			{
				<# foreach(var (name, _) in instructions) { #>
					m =>
					{
						ReadOnlySpan<byte> s = m.Span;

						<#
						var split = name.Split('_');
						var result = split[0].ToUpper() + " ";
						var size = 1;
						var @params = 1;

						for(int idx = 1; idx < split.Length; ++idx)
						{
							// Reg_Reg?
							if(idx + 1 < split.Length && split[idx] == "Reg" && split[idx + 1] == "Reg")
							{
								result += $"r{{s[{idx - 1}] & 0xF}} r{{(s[{idx - 1}] & 0xF0) >> 4}} ";
								idx += 1;
								size += 1;
								@params += 2;
							}
							else if(idx + 1 < split.Length && split[idx] == "PReg" && split[idx + 1] == "PReg")
							{
								result += $"[r{{s[{idx - 1}] & 0xF}}] [r{{(s[{idx - 1}] & 0xF0) >> 4}}] ";
								idx += 1;
								size += 1;
								@params += 2;
							}
							else if(idx + 1 < split.Length && split[idx] == "PReg" && split[idx + 1] == "Reg")
							{
								result += $"[r{{s[{idx - 1}] & 0xF}}] r{{(s[{idx - 1}] & 0xF0) >> 4}} ";
								idx += 1;
								size += 1;
								@params += 2;
							}
							else if(idx + 1 < split.Length && split[idx] == "Reg" && split[idx + 1] == "PReg")
							{
								result += $"r{{s[{idx - 1}] & 0xF}} [r{{(s[{idx - 1}] & 0xF0) >> 4}}] ";
								idx += 1;
								size += 1;
								@params += 2;
							}
							else if(split[idx] == "Reg")
							{
								result += $"r{{s[{idx - 1}] & 0xF}} ";
								size += 1;
								@params += 1;
							}
							else if(split[idx] == "RReg")
							{
								result += $"$+r{{s[{idx - 1}] & 0xF}} ";
								size += 1;
								@params += 1;
							}
							else if(split[idx] == "PReg")
							{
								result += $"[r{{s[{idx - 1}] & 0xF}}] ";
								size += 1;
								@params += 1;
							}
							else if(split[idx] == "I8")
							{
								result += $"0x{{s[{idx - 1}]:X2}} ";
								size += 1;
								@params += 1;
							}
							else if(split[idx] == "RI8")
							{
								result += $"$+0x{{s[{idx - 1}]:X2}} ";
								size += 1;
								@params += 1;
							}
							else if(split[idx] == "PI8")
							{
								result += $"[0x{{s[{idx - 1}]:X2}}] ";
								size += 1;
								@params += 1;
							}
							else 
								throw new InvalidOperationException($"Unexpected operand type: {split[idx]}");
						}
						#>

						return s.Length >= <#= @params - 1 #> ? ($"<#= result #>", <#= size #>) : (null, 0);
					},
				<# } #>
			};

		public static string Disassemble(Memory<byte> m, out int size)
		{
			if (m.Length > 0)
			{
				var instr = m.Span[0];
				if (instr < InstructionDecompilation.Length)
				{
					var (result, sz) = InstructionDecompilation[instr](m.Slice(1));
					size = sz;
					return result;
				}
			}

            size = 0;
            return null;
		}

        public static void Assemble(VM vm, string s)
        {
			ushort memidx = 0, org = 0;
			int i0, i1;

			var labels = new Dictionary<string, ushort>();

            var reader = new StringReader(s);
            string line;
			int lineidx = 0;
            var tokens = new List<string>();
            while ((line = reader.ReadLine()) != null)
            {
				++lineidx;

                tokens.Clear();
                for (int idx = 0; idx < line.Length && !char.IsWhiteSpace(line[idx]); ++idx)
                {
					while (idx < line.Length && char.IsWhiteSpace(line[idx])) 
						++idx;

                    var start = idx;
					if(idx < line.Length && line[idx] == '$')
					{
						++idx;																// $
						while (idx < line.Length && char.IsWhiteSpace(line[idx]))			// spaces
							++idx;
						while (idx < line.Length && !char.IsWhiteSpace(line[idx]))			// +
							++idx;					
						while (idx < line.Length && char.IsWhiteSpace(line[idx]))			// spaces
							++idx;
						while (idx < line.Length && !char.IsWhiteSpace(line[idx]))			// value
							++idx;					
					}
					else
						while (idx < line.Length && !char.IsWhiteSpace(line[idx]))
							++idx;
                    tokens.Add(line[start..idx]);
                }

				redo:
				if(!tokens.Any() || tokens[0].StartsWith(";")) continue;

				int GetNumber(string n) => n.StartsWith("0x") ? Convert.ToInt32(n, 16) : n.StartsWith("0b") ? Convert.ToInt32(n[2..], 2) : n[0] == '.' ? labels[n[1..]] : int.Parse(n);
				bool IsReg(string s, out int r) 
				{ 
					var m = Regex.Match(s, @"^r(\d+)$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				bool IsI8(string s, out int r) 
				{ 
					var m = Regex.Match(s, @"^(\d+|0x[\dA-Fa-f]+|0b[01]+|\.\w+)$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				bool IsPReg(string s, out int r) 
				{ 
					var m = Regex.Match(s, @"^\[r(\d+)\]$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				bool IsPI8(string s, out int r) 
				{ 
					var m = Regex.Match(s, @"^\[(\d+|0x[\dA-Fa-f]+|0b[01]+|\.\w+)\]$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				bool IsRReg(string s, out int r)
				{
					var m = Regex.Match(s, @"^\$\s*\+\s*r(\d+)$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				bool IsRI8(string s, out int r)
				{
					var m = Regex.Match(s, @"^\$\s*\+\s*(\d+|0x[\dA-Fa-f]+|0b[01]+)$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}
				bool IsAtAddress(string s, out int r)
				{ 
					var m = Regex.Match(s, @"^@(\d+|0x[\dA-Fa-f]+|0b[01]+)$", RegexOptions.IgnoreCase | RegexOptions.Compiled); 
					r = m.Success ? GetNumber(m.Groups[1].Value) : 0; 
					return m.Success; 
				}

                if (tokens.Count == 1 && IsAtAddress(tokens[0], out i0))
                {
                    // @addr
                    memidx = (ushort)i0;
                    continue;
                }

                if (tokens.Count >= 1 && tokens[0].FirstOrDefault() == '.')
                {
                    labels.Add(tokens[0][1..], memidx);
                    tokens.RemoveAt(0);
                    goto redo;
                }

				if(tokens.Count == 2 && tokens[0].Equals("DB", StringComparison.OrdinalIgnoreCase) && IsI8(tokens[1], out i0))
				{
					// db i8
					vm.Memory[memidx++] = (byte)i0;
					continue;
				}

				if(tokens.Count == 1 && tokens[0].Equals("ORG", StringComparison.OrdinalIgnoreCase))
				{
					org = memidx;
					continue;
				}

				<# foreach(var namegrp in instructions.Select(w => w.name).GroupBy(w => w.Split('_')[0])) { #>
					if(tokens[0].Equals("<#= namegrp.Key #>", StringComparison.OrdinalIgnoreCase))
					{
						<# foreach(var name in namegrp)
						{
							var split = name.Split('_');
						#>
						if(tokens.Count == <#= split.Length #>
							<# int idx = 0; foreach(var token in split.Skip(1)) { #> && Is<#= token #>(tokens[<#= idx + 1 #>], out i<#= idx++ #>) <# } #>)
						{
							vm.Memory[memidx++] = (byte)Instruction.<#= name #>;
							<# if(split.Length == 3) { #>
								<# if(split[1].EndsWith("Reg", StringComparison.OrdinalIgnoreCase) && split[2].EndsWith("Reg", StringComparison.OrdinalIgnoreCase)) { #>
									vm.Memory[memidx++] = (byte)(((i0 & 0xF) << 4) | (i1 & 0xF));
								<# } else { #>
									vm.Memory[memidx++] = (byte)i0;
									vm.Memory[memidx++] = (byte)i1;
								<# } #>
							<# } else if(split.Length == 2) { #>
								vm.Memory[memidx++] = (byte)i0;
							<# } #>
							continue;
						}
						<# } #>
					}
				<# } #>

				throw new AssemblerException(lineidx - 1, line);
            }

			// write org
			switch(vm.Type)
			{
				case VMType.BitLength8:
					vm.Memory[^1] = (byte)org;
					break;
				case VMType.BitLength16:
					MemoryMarshal.Write(vm.Memory.AsSpan(^2..), ref org);
					break;
				default:
					throw new InvalidOperationException($"Invalid VM type enountered: {vm.Type}.");
			}

			vm.Reset();
        }

		static void I8ToI4I4(int input, out int v1, out int v2)
		{
			v1 = input & 0xF;
			v2 = (input & 0xF0) >> 4;
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("Instructions.tt", null)]
	class AssemblerException : Exception
	{
		public int LineIndex { get; }
		public string Line { get; }

		public AssemblerException(int lineidx, string line) : base($"Assembler exception in line {lineidx}: {line}")
		{
			LineIndex = lineidx;
			Line = line;
		}
	}
}

<#+
	List<(string name, string instruction)> instructions;

	private string ToAsmInstruction(string name)
	{
		return string.Join(" ", name.Split('_').Select(w => (w == "RI8" ? "$+I8" : w == "RReg" ? "$+REG" : w).ToUpper()));
	}

	private string ToAsmBytes(string name)
	{
		string result = null;

		var idx = instructions.FindIndex(w => w.name == name);
		result += idx.ToString("x2") + " ";

		var parts = name.Split('_');
		for(int i = 1; i < parts.Length; ++i)
		{
			if(parts[i].Contains("Reg") && parts.Length > i + 1)
			{
				result += "reg:4\\|reg:4 ";
				++i;
			}
			else if(parts[i].Contains("Reg"))
				result += "reg ";
			else if(parts[i].Contains("I8"))
				result += "i8 ";
			else
				throw new InvalidOperationException();
		}

		return result;
	}

	private void SaveOutput(string outputFileName) 
	{
		string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
		string outputFilePath = Path.Combine(templateDirectory, outputFileName);
		File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
		this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
	}
#>